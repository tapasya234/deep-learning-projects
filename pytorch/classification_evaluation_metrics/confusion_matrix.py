import numpy as np


class ConfusionMatrix:
    def __init__(self):
        self.confidence = np.ndarray((2, 2), dtype=np.int32)

    def reset(self):
        self.confidence.fill(0)

    def add(self, prediction, target):
        """
        add uses the prediction probability and true label to compute the confusion matrix.

        :param self: Description
        :param prediction: The prediction probability generated by the model.
        :param target: The true label of the input used to test the model.
        """

        replaceIndices = np.vstack((target.flatten(), prediction.flatten())).T

        conf, _ = np.histogramdd(replaceIndices, bins=(2, 2), range=[(0, 2), (0, 2)])
        self.confidence += conf.astype(np.int32)

    def TP(self):
        return self.confidence[1, 1]

    def FP(self):
        return self.confidence[0, 1]

    def TN(self):
        return self.confidence[0, 0]

    def FN(self):
        return self.confidence[1, 0]

    def confusionMatrix(self):
        return np.array([[self.TP(), self.FP()], [self.FN(), self.TN()]])
